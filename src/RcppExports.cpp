// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// GaussianKerNonpar
Rcpp::NumericVector GaussianKerNonpar(SEXP Y, SEXP X, SEXP args, SEXP H, int n_cores);
RcppExport SEXP _semiBRM_GaussianKerNonpar(SEXP YSEXP, SEXP XSEXP, SEXP argsSEXP, SEXP HSEXP, SEXP n_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Y(YSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type args(argsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type n_cores(n_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(GaussianKerNonpar(Y, X, args, H, n_cores));
    return rcpp_result_gen;
END_RCPP
}
// GaussianKerNonparLeaveOneOut
Rcpp::NumericVector GaussianKerNonparLeaveOneOut(SEXP Y, SEXP X, SEXP H, int n_cores);
RcppExport SEXP _semiBRM_GaussianKerNonparLeaveOneOut(SEXP YSEXP, SEXP XSEXP, SEXP HSEXP, SEXP n_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type Y(YSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type n_cores(n_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(GaussianKerNonparLeaveOneOut(Y, X, H, n_cores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_semiBRM_GaussianKerNonpar", (DL_FUNC) &_semiBRM_GaussianKerNonpar, 5},
    {"_semiBRM_GaussianKerNonparLeaveOneOut", (DL_FUNC) &_semiBRM_GaussianKerNonparLeaveOneOut, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_semiBRM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
